on:
  push:
    branches:
      - main
  release:
    types: [created]

jobs:

  test:
    runs-on: ubuntu-latest
    container:
      image: python:3.11.5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up cache for pip
        uses: actions/cache@v2
        with:
          path: .cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-


      - name: Install Dependencies & Test
        run: |
          python --version
          python -mpip install pytest
          python -mpip install .
          # pytest -vvv .


  build:
    runs-on: ubuntu-latest
    container:
      image: python:3.11.5
      options: --shm-size=8gb

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Build Package
        run: |
          python -mpip install .
          python -mpip install setuptools wheel
          python setup.py sdist bdist_wheel

      - name: Upload Distribution as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist/*

      - name: Test with pytest
        run: |
          pip install pytest pytest-cov
          ulimit -n 2048
          pytest -vvv
          #  --doctest-modules \
          #  --junitxml=junit/test-results.xml \
          #  --cov=tme \
          #  --cov-report=xml \
          #  --cov-report=html

  docs:
    runs-on: ubuntu-latest
    container:
      image: python:3.11.5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Build Docs
        run: |
          python -mpip install .
          python -mpip install \
            Sphinx \
            pydata-sphinx-theme \
            sphinx_design \
            numpydoc \
            sphinx_copybutton \
            sphinx-tabs \
            matplotlib
          cd doc
          make clean
          make html
          mkdir -p ../public
          mv _build/html/* ../public/

      - name: Upload Public as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: public
          path: public

  pages:
    runs-on: ubuntu-latest
    needs: docs

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Download Public Artifacts
        uses: actions/download-artifact@v2
        with:
          name: public
          path: ./public

      - name: List directory after downloading artifact
        run: |
          ls -al
          ls -al ./public

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public

  pypi_release:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Push to PyPI
        run: |
          python -mpip install twine
          python -m twine upload --repository pypi dist/*
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

  docker:
    runs-on: ubuntu-latest
    #if: github.event_name == 'release'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile_GPU
          push: true
#          tags: ${{ secrets.DOCKERHUB_USERNAME }}/pytme:${{ github.event.release.tag_name }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/pytme:latest
